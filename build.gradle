plugins {
    id 'java'
    id 'checkstyle'
}

group = 'org.freenetproject'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    flatDir { dirs uri("${projectDir}/lib") }
    maven {
        url 'https://mvn.freenetproject.org'
        metadataSources {
            artifact()
        }
    }
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', "${project.buildDir}/generated/sources/main/java"]
        }
        resources {
            srcDirs = ['src/main/resources']
            exclude '**/Version.java'
        }
    }
}

dependencies {
    implementation project(':hyphanet-fred')
    implementation 'org.bouncycastle:bcprov-jdk15on:1.59'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.hamcrest:hamcrest:3.0'

    runtimeOnly 'org.freenetproject:freenet-ext:29'
}

tasks.register('getGitRevision') {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--always', '--abbrev=1', '--dirty'
        standardOutput = stdout
    }
    ext.revision = stdout.toString().trim()
}

// Define a new task for processing Version.java
task processVersionJava(type: Copy) {
    from(sourceSets.main.resources.srcDirs) {
        include '**/Version.java'
    }
    into "${project.buildDir}/generated/sources/main/java"
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
            git_revision: getGitRevision.revision,
            project_version: project.version
    ], beginToken: '@', endToken: '@')
}

processResources {
    dependsOn processVersionJava
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    // Exclude Version.java from main resources
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/Version.java'
        include 'org/freenetproject/freemail/l10n/*.l10n'
        include 'org/freenetproject/freemail/ui/web/css/*.css'
        include 'org/freenetproject/freemail/ui/web/images/**'
    }
}

test {
    useJUnit()
    include '**/*Test.java'
    systemProperty 'test.extensive', System.getProperty('test.extensive')
    systemProperty 'test.verbose', System.getProperty('test.verbose')
}

checkstyle {
    configFile = file("${rootDir}/checkstyle.xml")
    toolVersion = '8.41'
    ignoreFailures = true
}

jar {
    manifest {
        attributes(
                'Main-Class': 'org.freenetproject.freemail.FreemailCli',
                'Plugin-Main-Class': 'org.freenetproject.freemail.FreemailPlugin',
                'Implementation-Title': 'Freemail',
                'Implementation-Version': project.version
        )
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint'
}
compileJava.dependsOn processResources

tasks.named('compileJava') {
    dependsOn(':hyphanet-fred:jar')
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.register('runApp', JavaExec) {
    group = 'application'
    description = 'Run the main class'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.freenetproject.freemail.FreemailCli'
}
