<?xml version="1.0"?>
<project name="Freemail" default="default" basedir="." xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">
	<!--
	     build.properties holds the default values for the properties that
	     people might want to change. Use override.properties to set new
	     values without getting in trouble with Git.
	-->
	<property name="override" location="override.properties" />
	<property file="${override}"/>
	<property file="build.properties"/>

	<!-- set global properties for this build -->
	<property name="src" location="src/main/java"/>
	<property name="resources" location="src/main/resources"/>
	<property name="test" location="src/test/java"/>
	<property name="test.run" location="run"/>
	<property name="build" location="build"/>
	<property name="build-test" location="build-test"/>
	<property name="dist" location="dist"/>
	<property name="lib" location="lib"/>
	<property name="version.src" value="org/freenetproject/freemail/Version.java"/>
	<property name="version.build" value="org/freenetproject/freemail/Version.class"/>

	<property name="tools.src" location="src/tools/java"/>
	<property name="tools.dst" location="tools/build"/>

	<exec executable="git"
		failifexecutionfails="false"
		errorProperty="git.errror"
		outputproperty="git.describe"
		resultproperty="git.result">
		<arg value="describe" />
		<arg value="--always" />
		<arg value="--abbrev=1" />
		<arg value="--dirty" />
	</exec>

	<condition property="git.revision" value="${git.describe}" else="@unknown@">
		<and>
			<equals arg1="${git.result}" arg2="0" />
			<isset property="git.describe" />
		</and>
	</condition>

	<!--
	     Convenience targets
	-->

	<target name="all" depends="unit, dist, checkstyle, compile-tools"/>
	<target name="default" depends="unit, dist"/>

	<!--
	     Real targets
	-->
	<target name="compile"
	        description="Compiles the Freemail source code">
		<mkdir dir="${build}"/>

		<tstamp/>

		<!-- Create the Version file with patched revision number in ${build} -->
		<copy file="${resources}/${version.src}"
		      tofile="${build}/${version.src}"
		      overwrite="true" />
		<delete file="${build}/${version.build}" quiet="true" />
		<replace file="${build}/${version.src}">
			<replacefilter token="@git_revision@" value="${git.revision}"/>
			<replacefilter token="@project_version@" value="${project.version}"/>
		</replace>
		<echo message="Updated build version to ${git.revision} in ${build}/${version.src}"/>

		<!-- Compile the patched version file -->
		<javac srcdir="${build}"
		       destdir="${build}"
		       debug="on"
		       optimize="on"
		       source="1.8"
		       target="1.8"
		       encoding="UTF-8"
		       includeantruntime="false">
			<include name="${version.src}"/>
			<classpath>
				<pathelement location="${freenet-cvs-snapshot.location}"/>
				<pathelement path="${main.lib}"/>
				<pathelement location="${bcprov.location}"/>
			</classpath>
			<compilerarg value="-Xlint"/>
		</javac>

		<!-- Bundle the whole lot together, unless anyone whinges.
		     It makes it much easier to run -->
		<javac srcdir="${src}"
		       destdir="${build}"
		       debug="on"
		       optimize="on"
		       source="1.8"
		       target="1.8"
		       encoding="UTF-8"
		       includeantruntime="false">
			<classpath>
				<pathelement location="${freenet-cvs-snapshot.location}"/>
				<pathelement path="${main.lib}"/>
				<pathelement location="${bcprov.location}"/>
			</classpath>
			<compilerarg value="-Xlint"/>
		</javac>

	       <!-- Copy l10n and css -->
		<copy todir="${build}">
			<fileset dir="${resources}">
				<include name="org/freenetproject/freemail/l10n/*.l10n" />
				<include name="org/freenetproject/freemail/ui/web/css/*.css" />
				<include name="org/freenetproject/freemail/ui/web/images/" />
			</fileset>
		</copy>
	</target>

	<target name="compile-tools" description="Compiles the supporting tools">
		<mkdir dir="${tools.dst}"/>

		<javac srcdir="${tools.src}"
		       destdir="${tools.dst}"
		       debug="on"
		       optimize="on"
		       source="1.8"
		       target="1.8"
		       encoding="UTF-8"
		       includeantruntime="false">
			<classpath>
				<pathelement location="${bcprov.location}"/>
			</classpath>
			<compilerarg value="-Xlint"/>
		</javac>
	</target>

	<target name="unit-build" depends="compile" unless="${test.skip}">
		<mkdir dir="${build-test}"/>
		<javac srcdir="${test}"
		       destdir="${build-test}"
		       debug="on"
		       optimize="on"
		       source="1.8"
		       target="1.8"
		       encoding="UTF-8"
		       includeantruntime="false">
			<classpath>
				<pathelement location="${freenet-cvs-snapshot.location}"/>
				<pathelement location="${bcprov.location}"/>
				<pathelement location="${build}"/>
				<pathelement location="${junit}"/>
				<pathelement location="${hamcrest}"/>
				<pathelement path="${test.lib}"/>
			</classpath>
			<compilerarg line="-Xlint"/>
		</javac>
	</target>

	<target name="unit" depends="unit-build" unless="${test.skip}"
	        description="Runs the unit tests">
		<mkdir dir="${test.run}"/>
		<junit fork="yes" dir="${test.run}" haltonfailure="true">
			<classpath>
				<pathelement location="${freenet-cvs-snapshot.location}"/>
				<pathelement location="${bcprov.location}"/>
				<pathelement location="${build}"/>
				<pathelement location="${build-test}"/>
				<pathelement location="${junit}"/>
				<pathelement location="${hamcrest}"/>
				<pathelement path="${test.lib}"/>
			</classpath>

			<env key="test.extensive" value="${test.extensive}"/>
			<env key="test.verbose" value="${test.verbose}"/>

			<assertions><enable/></assertions>

			<formatter type="brief" usefile="false"/>
			<formatter type="xml" if="${test.xml_output}"/>
			<batchtest todir="${build-test}">
				<fileset dir="${build-test}">
					<include name="org/freenetproject/freemail/**/*Test.class"/>
				</fileset>
			</batchtest>
		</junit>
		<delete dir="${test.run}"/>
	</target>

	<target name="dist" depends="compile" description="Generates the Freemail jar">
		<mkdir dir="${dist}"/>
		<jar jarfile="${dist}/Freemail.jar" basedir="${build}">
			<manifest>
				<attribute name="Main-Class" value="org.freenetproject.freemail.FreemailCli"/>
				<attribute name="Plugin-Main-Class" value="org.freenetproject.freemail.FreemailPlugin"/>
				<attribute name="Built-By" value="${user.name}"/>
				<section name="common">
					<attribute name="Implementation-Title" value="Freemail"/>
					<attribute name="Implementation-Version" value="0.0"/>
					<attribute name="Implementation-Vendor" value="Dave Baker"/>
				</section>
			</manifest>
		</jar>
	</target>

	<target name="clean" description="Removes all generated files">
		<delete dir="${build}"/>
		<delete dir="${build-test}"/>
		<delete dir="${dist}"/>
		<delete dir="${run}"/>
		<delete dir="${tools.dst}"/>
	</target>

	<target name="distclean" depends="clean"
	        description="Removes all generated files and settings">
		<delete dir="${lib}"/>
		<delete file="${override}"/>
	</target>

	<!-- Checkstyle target that is run each build. Should run a
	     config that normally doesn't produce any warnings. -->
	<target name="checkstyle-auto" unless="${checkstyle.skip}">
		<cs:checkstyle config="checkstyle_auto.xml" failOnViolation="false">
			<fileset dir="${src}" includes="**/*.java">
				<exclude name="org/archive/**"/>
			</fileset>
			<fileset dir="${test}" includes="**/*.java"/>
			<fileset dir="${tools.src}" includes="**/*.java"/>
			<formatter type="plain"/>
		</cs:checkstyle>
	</target>

	<!-- Checkstyle run with the full config, i.e. what we would like the
	     code to follow. Useful for e.g. checking new commits. -->
	<target name="checkstyle" description="Runs Checkstyle on the source code">
		<cs:checkstyle config="checkstyle.xml" failOnViolation="false">
			<fileset dir="${src}" includes="**/*.java">
				<exclude name="org/archive/**"/>
			</fileset>
			<fileset dir="${test}" includes="**/*.java"/>
			<fileset dir="${tools.src}" includes="**/*.java"/>
			<formatter type="plain"/>
		</cs:checkstyle>
	</target>
</project>
